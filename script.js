// Default language
let currentLanguage = 'en';  // Initially set to English

const decorDetailsTranslations = {
    en: {
        "Kitchen": {
            "12*10*8": { paint: "Olive Green", cabinet: "White Wood", flooring: "Tile", image: "images/kitchen1.jpeg" },
            "14*12*9": { paint: "Brick Red", cabinet: "Dark Brown", flooring: "Vinyl", image: "images/kitchen2.jpeg" },
            "16*14*10": { paint: "Soft Yellow", cabinet: "Beige", flooring: "Marble", image: "images/kitchen3.jpeg" },
            "18*16*11": { paint: "Sky Blue", cabinet: "Light Grey", flooring: "Hardwood", image: "images/kitchen4.jpeg" },
            "20*18*12": { paint: "Deep Orange", cabinet: "Dark Teak", flooring: "Granite", image: "images/kitchen5.jpeg" },
            "22*20*13": { paint: "Mint Green", cabinet: "White", flooring: "Cement", image: "images/kitchen6.jpeg" }
        },
        "Bedroom": {
            "10*12*9": { paint: "Pastel Pink", curtains: "White Cotton", mats: "Soft Carpet", image: "images/bedroom1.jpeg" },
            "11*13*10": { paint: "Lavender", curtains: "Dark Grey", mats: "Silk Rug", image: "images/bedroom2.jpeg" },
            "12*14*11": { paint: "Sky Blue", curtains: "Light Brown", mats: "Jute Mat", image: "images/bedroom3.jpeg" }
        },
        "Hall": {
            "20*25*12": { paint: "Off White", curtains: "Royal Blue", plants: "Monstera", mats: "Persian Rug", image: "images/hall1.jpeg" },
            "22*26*13": { paint: "Warm Grey", curtains: "Dark Brown", plants: "Palm Tree", mats: "Velvet Mat", image: "images/hall2.jpeg" }
        }
    },
    ta: {
        "Kitchen": {
            "12*10*8": { paint: "‡ÆÜ‡Æ≤‡Æø‡Æµ‡Øç ‡Æ™‡Æö‡Øç‡Æö‡Øà", cabinet: "‡Æµ‡ØÜ‡Æ≥‡Øç‡Æ≥‡Øà ‡ÆÆ‡Æ∞‡ÆÆ‡Øç", flooring: "‡Æü‡Øà‡Æ≤‡Øç", image: "images/kitchen1.jpeg" },
            "14*12*9": { paint: "‡Æö‡ØÜ‡Æô‡Øç‡Æï‡Æ≤‡Øç ‡Æö‡Æø‡Æµ‡Æ™‡Øç‡Æ™‡ØÅ", cabinet: "‡Æï‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ ‡Æ™‡Æ¥‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ", flooring: "‡Æµ‡Æø‡Æ©‡Øà‡Æ≤‡Øç", image: "images/kitchen2.jpeg" },
            "16*14*10": { paint: "‡ÆÆ‡ØÜ‡Æ©‡Øç‡ÆÆ‡Øà‡ÆØ‡Ææ‡Æ© ‡ÆÆ‡Æû‡Øç‡Æö‡Æ≥‡Øç", cabinet: "‡Æ™‡ØÄ‡Æú‡Øç", flooring: "‡ÆÆ‡Ææ‡Æ∞‡Øç‡Æ™‡Æø‡Æ≥‡Øç", image: "images/kitchen3.jpeg" },
            "18*16*11": { paint: "‡Æµ‡Ææ‡Æ© ‡Æ®‡ØÄ‡Æ≤‡ÆÆ‡Øç", cabinet: "‡Æá‡Æ≤‡Æï‡ØÅ ‡Æö‡Ææ‡ÆÆ‡Øç‡Æ™‡Æ≤‡Øç", flooring: "‡Æï‡Æü‡Æø‡Æ© ‡ÆÆ‡Æ∞‡ÆÆ‡Øç", image: "images/kitchen4.jpeg" },
            "20*18*12": { paint: "‡ÆÜ‡Æ¥‡Øç‡Æ®‡Øç‡Æ§ ‡ÆÜ‡Æ∞‡Æû‡Øç‡Æö‡ØÅ", cabinet: "‡Æï‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ ‡Æü‡ØÄ‡Æï‡Øç", flooring: "‡Æï‡Æø‡Æ∞‡Ææ‡Æ©‡Øà‡Æü‡Øç", image: "images/kitchen5.jpeg" },
            "22*20*13": { paint: "‡ÆÆ‡Æø‡Æ£‡Øç‡Æü‡Øç ‡Æ™‡Æö‡Øç‡Æö‡Øà", cabinet: "‡Æµ‡ØÜ‡Æ≥‡Øç‡Æ≥‡Øà", flooring: "‡Æö‡Æø‡ÆÆ‡ØÜ‡Æ£‡Øç‡Æü‡Øç", image: "images/kitchen6.jpeg" }
        },
        "Bedroom": {
            "10*12*9": { paint: "‡Æ™‡Øá‡Æ∏‡Øç‡Æü‡Æ≤‡Øç ‡Æ™‡Æø‡Æô‡Øç‡Æï‡Øç", curtains: "‡Æµ‡ØÜ‡Æ≥‡Øç‡Æ≥‡Øà ‡Æ™‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡Æø", mats: "‡ÆÆ‡ØÜ‡Æ©‡Øç‡ÆÆ‡Øà‡ÆØ‡Ææ‡Æ© ‡Æï‡Ææ‡Æ∞‡Øç‡Æ™‡ØÜ‡Æü‡Øç", image: "images/bedroom1.jpeg" },
            "11*13*10": { paint: "‡Æ≤‡Ææ‡Æµ‡ØÜ‡Æ£‡Øç‡Æü‡Æ∞‡Øç", curtains: "‡Æï‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ ‡Æö‡Ææ‡ÆÆ‡Øç‡Æ™‡Æ≤‡Øç", mats: "‡Æ™‡Æü‡Øç‡Æü‡ØÅ ‡Æµ‡Æø‡Æ∞‡Æø‡Æ™‡Øç‡Æ™‡ØÅ", image: "images/bedroom2.jpeg" },
            "12*14*11": { paint: "‡Æµ‡Ææ‡Æ© ‡Æ®‡ØÄ‡Æ≤‡ÆÆ‡Øç", curtains: "‡Æá‡Æ≤‡Æï‡ØÅ ‡Æ™‡Æ¥‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ", mats: "‡Æö‡Æ£‡Æ≤‡Øç ‡Æ™‡Ææ‡ÆØ‡Øç", image: "images/bedroom3.jpeg" }
        },
        "Hall": {
            "20*25*12": { paint: "‡ÆÜ‡ÆÉ‡Æ™‡Øç ‡Æµ‡ØÜ‡Æ≥‡Øç‡Æ≥‡Øà", curtains: "‡Æ∞‡Ææ‡ÆØ‡Æ≤‡Øç ‡Æ®‡ØÄ‡Æ≤‡ÆÆ‡Øç", plants: "‡ÆÆ‡Ææ‡Æ©‡Øç‡Æ∏‡Øç‡Æü‡ØÜ‡Æ∞‡Ææ", mats: "‡Æ™‡ØÜ‡Æ∞‡Øç‡Æö‡Æø‡ÆØ‡Æ©‡Øç ‡Æµ‡Æø‡Æ∞‡Æø‡Æ™‡Øç‡Æ™‡ØÅ", image: "images/hall1.jpeg" },
            "22*26*13": { paint: "‡Æµ‡ØÜ‡Æ§‡ØÅ‡Æµ‡ØÜ‡Æ§‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡Æ© ‡Æö‡Ææ‡ÆÆ‡Øç‡Æ™‡Æ≤‡Øç", curtains: "‡Æï‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ ‡Æ™‡Æ¥‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ", plants: "‡Æ™‡Æ©‡Øà ‡ÆÆ‡Æ∞‡ÆÆ‡Øç", mats: "‡Æµ‡ØÜ‡Æ≤‡Øç‡Æµ‡ØÜ‡Æü‡Øç ‡Æµ‡Æø‡Æ∞‡Æø‡Æ™‡Øç‡Æ™‡ØÅ", image: "images/hall2.jpeg" }
        }
    }
};

// Update decorDetails when language changes
function updateDecorDetails() {
    return decorDetailsTranslations[currentLanguage];
}

let decorDetails = updateDecorDetails();

function goToHome() {
    window.location.href = "home.html";
}

function populateDimensions() {
    const roomTypeSelect = document.getElementById("roomType");
    const dimensionSelect = document.getElementById("dimension");
    
    // Clear previous options
    dimensionSelect.innerHTML = "";

    // Add default "Choose a dimension" option
    const defaultDimOption = document.createElement("option");
    defaultDimOption.value = "";
    defaultDimOption.textContent = translations[currentLanguage].defaultDimension;
    defaultDimOption.selected = true;
    defaultDimOption.disabled = true;
    dimensionSelect.appendChild(defaultDimOption);

    if (!roomTypeSelect.value) {
        return; // Do not populate dimensions if no room type is selected
    }

    if (decorDetails[roomTypeSelect.value]) {
        Object.keys(decorDetails[roomTypeSelect.value]).forEach(dim => {
            const option = document.createElement("option");
            option.value = dim;
            option.textContent = dim;
            dimensionSelect.appendChild(option);
        });
    }

    // Ensure first option remains selected
    dimensionSelect.selectedIndex = 0;
}

// Ensure the user selects valid options
function findDecoration() {
    const roomTypeSelect = document.getElementById("roomType");
    const dimensionSelect = document.getElementById("dimension");
    const resultDiv = document.getElementById("result");

    const roomType = roomTypeSelect.value.trim();
    const selectedDimension = dimensionSelect.value.trim();

    // Clear previous messages with smooth transition
    resultDiv.style.opacity = '0';
    setTimeout(() => {
        resultDiv.innerHTML = "";
        
        // Validate selection
        if (!roomType || !selectedDimension) {
            resultDiv.innerHTML = `<p style="color: #ff4444; font-weight: bold; padding: 10px; background: rgba(255,68,68,0.1); border-radius: 5px;">
                ${translations[currentLanguage].selectBothError}
            </p>`;
            resultDiv.style.display = "block";
            resultDiv.style.opacity = '1';
            return;
        }

        const details = decorDetails[roomType]?.[selectedDimension];

        if (details) {
            // Translate property labels based on current language
            const propertyLabels = {
                paint: currentLanguage === 'ta' ? '‡Æµ‡Æ£‡Øç‡Æ£‡ÆÆ‡Øç' : 'Paint',
                cabinet: currentLanguage === 'ta' ? '‡ÆÖ‡Æ≤‡ÆÆ‡Ææ‡Æ∞‡Æø' : 'Cabinet',
                flooring: currentLanguage === 'ta' ? '‡Æ§‡Æ∞‡Øà' : 'Flooring',
                curtains: currentLanguage === 'ta' ? '‡Æ§‡Æø‡Æ∞‡Øà‡Æö‡Øç‡Æö‡ØÄ‡Æ≤‡Øà‡Æï‡Æ≥‡Øç' : 'Curtains',
                mats: currentLanguage === 'ta' ? '‡Æµ‡Æø‡Æ∞‡Æø‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç' : 'Mats',
                plants: currentLanguage === 'ta' ? '‡Æö‡ØÜ‡Æü‡Æø‡Æï‡Æ≥‡Øç' : 'Plants'
            };

            let htmlContent = `
                <div style="animation: fadeIn 0.5s ease-in-out;">
                    <h3>${translations[currentLanguage].roomOptions[translations['en'].roomOptions.indexOf(roomType)]} (${selectedDimension})</h3>
                    <img src="${details.image}" alt="${roomType} Design" 
                         style="max-width: 100%; height: auto; box-shadow: 0 4px 8px rgba(0,0,0,0.2);" 
                         loading="lazy">
                    <div class="details-container" style="margin-top: 20px; text-align: left; padding: 15px; background: rgba(255,255,255,0.1); border-radius: 10px;">
                        <p><strong>${propertyLabels.paint}:</strong> ${details.paint || "N/A"}</p>
            `;

            if (details.cabinet) htmlContent += `<p><strong>${propertyLabels.cabinet}:</strong> ${details.cabinet}</p>`;
            if (details.flooring) htmlContent += `<p><strong>${propertyLabels.flooring}:</strong> ${details.flooring}</p>`;
            if (details.curtains) htmlContent += `<p><strong>${propertyLabels.curtains}:</strong> ${details.curtains}</p>`;
            if (details.mats) htmlContent += `<p><strong>${propertyLabels.mats}:</strong> ${details.mats}</p>`;
            if (details.plants) htmlContent += `<p><strong>${propertyLabels.plants}:</strong> ${details.plants}</p>`;

            htmlContent += '</div></div>';
            resultDiv.innerHTML = htmlContent;
        } else {
            const errorMessage = translations[currentLanguage].noMatchingDesign
                .replace('{roomType}', translations[currentLanguage].roomOptions[translations['en'].roomOptions.indexOf(roomType)])
                .replace('{dimension}', selectedDimension);

            resultDiv.innerHTML = `<p style="color: #ff4444; padding: 10px; background: rgba(255,68,68,0.1); border-radius: 5px;">${errorMessage}</p>`;
        }

        resultDiv.style.display = "block";
        resultDiv.style.opacity = '1';
    }, 300);
}

// üîÑ Reset function to clear selections and result
function resetForm() {
    document.getElementById("roomType").selectedIndex = 0;
    document.getElementById("dimension").innerHTML = `<option value="" disabled selected>Choose a dimension</option>`;
    document.getElementById("result").innerHTML = "";
}

// üü¢ Auto-clear error message when a valid selection is made
document.getElementById("roomType").addEventListener("change", () => {
    document.getElementById("result").innerHTML = "";
});
document.getElementById("dimension").addEventListener("change", () => {
    document.getElementById("result").innerHTML = "";
});


// Add default "Choose an option" to room type dropdown on page load
document.addEventListener("DOMContentLoaded", function () {
    const roomTypeSelect = document.getElementById("roomType");

    // Add "Choose a room type" as the first option
    const defaultRoomOption = document.createElement("option");
    defaultRoomOption.value = "";
    defaultRoomOption.textContent = "Choose a room type";
    defaultRoomOption.selected = true;
    defaultRoomOption.disabled = true;
    roomTypeSelect.insertBefore(defaultRoomOption, roomTypeSelect.firstChild);

    // Ensure dimensions are updated only when a valid room type is selected
    roomTypeSelect.addEventListener("change", populateDimensions);
});

document.addEventListener("keydown", function(event) {
    if (event.key === "Enter") {
        event.preventDefault(); // Prevent default form submission
        findDecoration(); // Call your function to get suggestions
    }
    if (event.key === "Escape") {
        resetForm(); // Call your reset function
    }
});



function toggleContactInfo() {
    const contactInfo = document.getElementById("contactInfo");
    contactInfo.style.display = contactInfo.style.display === "block" ? "none" : "block";
}


// Toggle feedback form
function toggleFeedbackForm() {
    document.getElementById("feedbackForm").classList.toggle("active");
}
// Handle form submission and show success message
function handleSubmitFeedback(event) {
    event.preventDefault();
    
    const form = event.target;
    const name = form.querySelector('#name');
    const email = form.querySelector('#email');
    const message = form.querySelector('#message');
    
    // Simple validation
    if (!name.value || !email.value || !message.value) {
        const errorDiv = document.createElement('div');
        errorDiv.style.color = '#ff4444';
        errorDiv.style.padding = '10px';
        errorDiv.style.marginBottom = '10px';
        errorDiv.style.background = 'rgba(255,68,68,0.1)';
        errorDiv.style.borderRadius = '5px';
        errorDiv.textContent = currentLanguage === 'ta' ? '‡ÆÖ‡Æ©‡Øà‡Æ§‡Øç‡Æ§‡ØÅ ‡Æ™‡ØÅ‡Æ≤‡Æô‡Øç‡Æï‡Æ≥‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æ®‡Æø‡Æ∞‡Æ™‡Øç‡Æ™‡Æµ‡ØÅ‡ÆÆ‡Øç' : 'Please fill in all fields';
        
        form.insertBefore(errorDiv, form.firstChild);
        setTimeout(() => errorDiv.remove(), 3000);
        return;
    }

    // Display success message with animation
    const feedbackForm = document.getElementById("feedbackForm");
    feedbackForm.style.opacity = '0';
    
    setTimeout(() => {
        feedbackForm.innerHTML = `
            <div class="feedback-header">
                <h3>${translations[currentLanguage].feedbackTitle}</h3>
            </div>
            <p style="color: var(--success-color); padding: 15px; background: rgba(76,175,80,0.1); border-radius: 5px;">
                ${translations[currentLanguage].feedbackSuccess}
            </p>
        `;
        feedbackForm.style.opacity = '1';
    }, 300);

    // Reset form after 3 seconds and close feedback panel
    setTimeout(() => {
        toggleFeedbackForm();
        form.reset();
    }, 3000);
}


// Attach submit handler to feedback form
document.addEventListener('DOMContentLoaded', function() {
    const feedbackForm = document.querySelector("#feedbackForm form");
    if (feedbackForm) {
        feedbackForm.addEventListener("submit", handleSubmitFeedback);
    }
});



// Language content
const translations = {
    en: {
        homeDecorTitle: "HomeDecor",
        findIdeaTitle: "Find Your Home Decoration Idea",
        roomTypeLabel: "Select Room Type:",
        dimensionLabel: "Select Room Dimensions:",
        getSuggestionBtn: "Get Suggestion",
        feedbackTitle: "Feedback",
        phoneText: "Phone:",
        emailText: "Email:",
        namePlaceholder: "Your Name",
        emailPlaceholder: "Your Email",
        messagePlaceholder: "Your Feedback",
        submitBtn: "Submit",
        resetBtn: "Reset",
        roomOptions: ["Bedroom", "Hall", "Kitchen"],
        defaultDimension: "Choose a dimension",
        defaultRoomType: "Choose a room type",
        noMatchingDesign: "No matching design found for {roomType} with dimensions {dimension}.",
        selectBothError: "‚ö† Please select both Room Type and Dimension.",
        feedbackSuccess: "Your feedback has been submitted successfully. Thank you!",
        tooltips: {
            home: "Go to Home",
            contact: "Contact Us",
            feedback: "Give Feedback",
            language: "Change Language"
        }
    },
    ta: {
        homeDecorTitle: "‡Æá‡Æ≤‡Øç‡Æ≤‡ÆÆ‡Øç ‡ÆÖ‡Æ≤‡Æô‡Øç‡Æï‡Æ∞‡Æø‡Æ™‡Øç‡Æ™‡ØÅ",
        findIdeaTitle: "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æá‡Æ≤‡Øç‡Æ≤ ‡ÆÖ‡Æ≤‡Æô‡Øç‡Æï‡Æ∞‡Æø‡Æ™‡Øç‡Æ™‡ØÅ ‡ÆØ‡Øã‡Æö‡Æ©‡Øà‡ÆØ‡Øà ‡Æï‡Æ£‡Øç‡Æü‡Æ±‡Æø‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç",
        roomTypeLabel: "‡ÆÖ‡Æ±‡Øà ‡Æµ‡Æï‡Øà‡ÆØ‡Øà ‡Æ§‡Øá‡Æ∞‡Øç‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç:",
        dimensionLabel: "‡ÆÖ‡Æ±‡Øà ‡ÆÖ‡Æ≥‡Æµ‡ØÅ‡Æï‡Æ≥‡Øà ‡Æ§‡Øá‡Æ∞‡Øç‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç:",
        getSuggestionBtn: "‡ÆÜ‡Æ≤‡Øã‡Æö‡Æ©‡Øà ‡Æ™‡ØÜ‡Æ±‡ØÅ‡Æï",
        feedbackTitle: "‡Æï‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æï‡Æ≥‡Øç",
        phoneText: "‡Æ§‡Øä‡Æ≤‡Øà‡Æ™‡Øá‡Æö‡Æø:",
        emailText: "‡ÆÆ‡Æø‡Æ©‡Øç‡Æ©‡Æû‡Øç‡Æö‡Æ≤‡Øç:",
        namePlaceholder: "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç",
        emailPlaceholder: "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æø‡Æ©‡Øç‡Æ©‡Æû‡Øç‡Æö‡Æ≤‡Øç",
        messagePlaceholder: "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ",
        submitBtn: "‡Æö‡ÆÆ‡Æ∞‡Øç‡Æ™‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
        resetBtn: "‡ÆÆ‡ØÄ‡Æü‡Øç‡Æü‡ÆÆ‡Øà‡Æï‡Øç‡Æï",
        roomOptions: ["‡Æ™‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Øà ‡ÆÖ‡Æ±‡Øà", "‡Æï‡ØÇ‡Æü‡ÆÆ‡Øç", "‡Æö‡ÆÆ‡Øà‡ÆØ‡Æ≤‡Æ±‡Øà"],
        defaultDimension: "‡ÆÖ‡Æ≥‡Æµ‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
        defaultRoomType: "‡ÆÖ‡Æ±‡Øà ‡Æµ‡Æï‡Øà‡ÆØ‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
        noMatchingDesign: "{roomType} ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç {dimension} ‡ÆÖ‡Æ≥‡Æµ‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡Ææ‡Æ© ‡Æµ‡Æü‡Æø‡Æµ‡ÆÆ‡Øà‡Æ™‡Øç‡Æ™‡ØÅ ‡Æï‡Æø‡Æü‡Øà‡Æï‡Øç‡Æï‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà.",
        selectBothError: "‚ö† ‡ÆÖ‡Æ±‡Øà ‡Æµ‡Æï‡Øà ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡ÆÖ‡Æ≥‡Æµ‡ØÅ ‡Æá‡Æ∞‡Æ£‡Øç‡Æü‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.",
        feedbackSuccess: "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ ‡Æµ‡ØÜ‡Æ±‡Øç‡Æ±‡Æø‡Æï‡Æ∞‡ÆÆ‡Ææ‡Æï ‡Æö‡ÆÆ‡Æ∞‡Øç‡Æ™‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ. ‡Æ®‡Æ©‡Øç‡Æ±‡Æø!",
        tooltips: {
            home: "‡ÆÆ‡ØÅ‡Æï‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡Æö‡Øç ‡Æö‡ØÜ‡Æ≤‡Øç‡Æï",
            contact: "‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥‡Æµ‡ØÅ‡ÆÆ‡Øç",
            feedback: "‡Æï‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ ‡Æ§‡ØÜ‡Æ∞‡Æø‡Æµ‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
            language: "‡ÆÆ‡Øä‡Æ¥‡Æø‡ÆØ‡Øà ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡Æµ‡ØÅ‡ÆÆ‡Øç"
        }
    }
};
// Function to switch languages
function toggleLanguage() {
    currentLanguage = (currentLanguage === 'en') ? 'ta' : 'en';
    decorDetails = updateDecorDetails(); // Update decorDetails when language changes

    // Update static text elements
    const elementsToUpdate = {
        'homeDecorTitle': 'textContent',
        'findIdeaTitle': 'textContent',
        'roomTypeLabel': 'textContent',
        'dimensionLabel': 'textContent',
        'getSuggestionBtn': 'textContent',
        'feedbackTitle': 'textContent',
        'phoneText': 'textContent',
        'emailText': 'textContent',
        'resetBtn': 'textContent'
    };

    for (const [id, property] of Object.entries(elementsToUpdate)) {
        const element = document.getElementById(id);
        if (element) {
            element[property] = translations[currentLanguage][id];
        }
    }

    // Update tooltips
    const tooltipElements = {
        'fa-home': 'home',
        'fa-phone': 'contact',
        'fa-comment-dots': 'feedback',
        'fa-language': 'language'
    };

    for (const [iconClass, tooltipKey] of Object.entries(tooltipElements)) {
        const icon = document.querySelector(`.${iconClass}`);
        if (icon) {
            icon.title = translations[currentLanguage].tooltips[tooltipKey];
        }
    }

    // Update room type dropdown
    populateRoomTypeOptions();

    // Update dimension dropdown
    const dimensionSelect = document.getElementById("dimension");
    if (dimensionSelect) {
        const firstOption = dimensionSelect.querySelector('option');
        if (firstOption) {
            firstOption.textContent = translations[currentLanguage].defaultDimension;
        }
    }

    // Update form placeholders if they exist
    const placeholders = {
        'name': 'namePlaceholder',
        'email': 'emailPlaceholder',
        'message': 'messagePlaceholder'
    };

    for (const [id, key] of Object.entries(placeholders)) {
        const element = document.getElementById(id);
        if (element) {
            element.placeholder = translations[currentLanguage][key];
        }
    }

    // Refresh any existing content
    const resultDiv = document.getElementById("result");
    if (resultDiv && resultDiv.innerHTML !== '') {
        findDecoration(); // Re-render the result in new language
    }
}
    
// Initialize translations on page load
document.addEventListener('DOMContentLoaded', function() {
    // Set initial language
    document.querySelectorAll('[data-translate]').forEach(element => {
        const key = element.getAttribute('data-translate');
        if (translations[currentLanguage][key]) {
            element.textContent = translations[currentLanguage][key];
        }
    });

    // Initialize placeholders
    const placeholders = {
        'name': 'namePlaceholder',
        'email': 'emailPlaceholder',
        'message': 'messagePlaceholder'
    };

    for (const [id, key] of Object.entries(placeholders)) {
        const element = document.getElementById(id);
        if (element) {
            element.placeholder = translations[currentLanguage][key];
        }
    }

    // Initialize room type dropdown
    populateRoomTypeOptions();
});

// Function to populate room type options
function populateRoomTypeOptions() {
    const roomTypeSelect = document.getElementById("roomType");
    if (roomTypeSelect) {
        roomTypeSelect.innerHTML = '';
        
        // Add default option
        const defaultOption = document.createElement("option");
        defaultOption.value = "";
        defaultOption.textContent = translations[currentLanguage].defaultRoomType;
        defaultOption.disabled = true;
        defaultOption.selected = true;
        roomTypeSelect.appendChild(defaultOption);

        // Add room options
        translations[currentLanguage].roomOptions.forEach((room, index) => {
            const option = document.createElement("option");
            option.value = translations['en'].roomOptions[index];
            option.textContent = room;
            roomTypeSelect.appendChild(option);
        });
    }
}
